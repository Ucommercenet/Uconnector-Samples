<?xml version="1.0" encoding="utf-8" ?>
<castle>
  <components>
    <component id="Validator"
           service="UConnector.Validatation.OperationValidater, UConnector"
           type="UConnector.Validatation.OperationValidater, UConnector"
           lifestyle="Singleton">
      <parameters>
        <validators>
          <array>
            <value>${Validator.SpecialRules}</value>
            <value>${Validator.BatchValidator}</value>
            <value>${Validator.InputOutputValidator}</value>
            <value>${Validator.ConfigurableValidator}</value>
          </array>
        </validators>
      </parameters>
    </component>
    <component id="Validator.SpecialRules"
           service="UConnector.Validatation.Validators.IValidator, UConnector"
           type="UConnector.Validatation.Validators.SpecialRules, UConnector"
           lifestyle="Thread" />
    <component id="Validator.BatchValidator"
           service="UConnector.Validatation.Validators.IValidator, UConnector"
           type="UConnector.Validatation.Validators.BatchValidator, UConnector"
           lifestyle="Thread" />
    <component id="Validator.InputOutputValidator"
           service="UConnector.Validatation.Validators.IValidator, UConnector"
           type="UConnector.Validatation.Validators.InputOutputValidator, UConnector"
           lifestyle="Thread" />
    <component id="Validator.ConfigurableValidator"
           service="UConnector.Validatation.Validators.IValidator, UConnector"
           type="UConnector.Validatation.Validators.ConfigurableValidator, UConnector"
           lifestyle="Thread" />
		<component id="uConnector.OperationEngineFactory"
           service="UConnector.IOperationEngineFactory, UConnector"
           type="UConnector.OperationEngineFactory, UConnector"
           lifestyle="Transient" />
		<component id="uConnector.OperationEngine"
           service="UConnector.IOperationEngine, UConnector"
           type="UConnector.OperationEngine, UConnector"
           lifestyle="Transient">
			<parameters>
				<ExceptionNotifier>${uConnector.ExceptionNotifier}</ExceptionNotifier>
			</parameters>
		</component>
		<!-- <component id="Persistor.ReceiverDataPersister"
           service="UConnector.Interfaces.IReceiverDataPersistor, UConnector"
           type="UConnector.Interfaces.Impl.DoNotPersist, UConnector"
           lifestyle="Transient" /> -->
		<component id="Persistor.ReceiverDataPersister"
           service="UConnector.Interfaces.IReceiverDataPersistor, UConnector"
           type="UConnector.Interfaces.Impl.DefaultReceiverDataPersistor, UConnector"
           lifestyle="Transient">
			<parameters>
				<persistorLocators>
					<list>
						<item>${Persistor.DefaultPersistorLocator}</item>
					</list>
				</persistorLocators>
				<path>C:/uConnector/PersistedData</path>
			</parameters>
		</component>
		<component id="Persister.DirectoryStructureStrategy"
           service="UConnector.Interfaces.IPersistorDirectoryStructureStrategy, UConnector"
           type="UConnector.Interfaces.Impl.PersistorDirectoryStructureStrategyBasedOnCurrentTime, UConnector"
           lifestyle="Transient" />
		<component id="Persistor.DefaultPersistorLocator"
           service="UConnector.Interfaces.ITypePersistorLocator, UConnector"
           type="UConnector.Interfaces.Impl.DefaultTypePersistorLocator, UConnector"
           lifestyle="Transient" />
		<component id="uConnector.ExceptionNotifier"
           service="UConnector.Interfaces.IExceptionNotifier, UConnector"
           type="UConnector.Interfaces.Impl.NoNotificationOnException, UConnector"
           lifestyle="Transient" />
		<component id="uConnector.Framework.SendRetryQueueFactory"
							 service="UConnector.Framework.ISendRetryQueueFactory, UConnector"
							 type="UConnector.Framework.SendRetryQueueFactory, UConnector"
							 lifestyle="Transient" />
		<component id="uConnector.Framework.SendRetryQueue"
							 service="UConnector.Framework.ISendRetryQueue, UConnector"
							 type="UConnector.Framework.SendRetryQueueInMemory, UConnector"
							 lifestyle="Transient" />
	</components>
</castle>